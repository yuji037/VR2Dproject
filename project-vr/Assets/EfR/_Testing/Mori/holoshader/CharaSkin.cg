// Character skin shader
// Includes falloff shadow

// Material parameters
float4 _Color;
float4 _ShadowColor;
float4 _LightColor0;
float4 _MainTex_ST;

// Textures
sampler2D _MainTex;
sampler2D _FalloffSampler;
sampler2D _RimLightSampler;

// Constants
#define FALLOFF_POWER 1.0

#ifdef ENABLE_CAST_SHADOWS

// Structure from vertex shader to fragment shader
struct v2f
{
	float4 pos    : SV_POSITION;
	LIGHTING_COORDS( 0, 1 )
	float3 normal : TEXCOORD2;
	float2 uv     : TEXCOORD3;
	float3 eyeDir : TEXCOORD4;
	float3 lightDir : TEXCOORD5;
	float4 wpos : TEXCOORD6;
	float4 spos : TEXCOORD7;
};

#else

// Structure from vertex shader to fragment shader
struct v2f
{
	float4 pos    : SV_POSITION;
	float3 normal : TEXCOORD0;
	float2 uv     : TEXCOORD1;
	float3 eyeDir : TEXCOORD2;
	float3 lightDir : TEXCOORD3;
	float4 wpos : TEXCOORD4;
	float4 spos : TEXCOORD5;
};

#endif

// Float types
#define float_t  half
#define float2_t half2
#define float3_t half3
#define float4_t half4

// Vertex shader
v2f vert( appdata_base v )
{
	v2f o;
	o.pos = o.spos = UnityObjectToClipPos( v.vertex );
	o.wpos = mul(unity_ObjectToWorld, v.vertex);
	o.uv = TRANSFORM_TEX( v.texcoord.xy, _MainTex );
	o.normal = normalize( mul( unity_ObjectToWorld, float4_t( v.normal, 0 ) ).xyz );

	// Eye direction vector
	float4_t worldPos =  mul( unity_ObjectToWorld, v.vertex );
	o.eyeDir = normalize( _WorldSpaceCameraPos - worldPos );

	o.lightDir = WorldSpaceLightDir( v.vertex );

#ifdef ENABLE_CAST_SHADOWS
	TRANSFER_VERTEX_TO_FRAGMENT( o );
#endif

	return o;
}

float  modc(float  a, float  b) { return a - b * floor(a/b); }
float2 modc(float2 a, float2 b) { return a - b * floor(a/b); }
float3 modc(float3 a, float3 b) { return a - b * floor(a/b); }
float4 modc(float4 a, float4 b) { return a - b * floor(a/b); }

float2 boxcell(float3 p3, float3 n)
{
	float2 p;
	float t = 0.7;
	if(abs(n.x)>t) {
		p = p3.yz;
	}
	else if(abs(n.z)>t) {
		p = p3.xy;
	}
	else {
		p = p3.xz;
	}

	p = frac(p);
	float r = 0.123;
	float v = 0.0, g = 0.0;
	r = frac(r * 9184.928);
	float cp, d;
		
	d = p.x;
	g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 1000.0);
	d = p.y;
	g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 1000.0);
	d = p.x - 1.0;
	g += pow(clamp(3.0 - abs(d), 0.0, 1.0), 1000.0);
	d = p.y - 1.0;
	g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 10000.0);
		
		
	const int iter = 11;
	for(int i = 0; i < iter; i ++)
	{
		cp = 0.5 + (r - 0.5) * 0.9;
		d = p.x - cp;
		//g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 200.0);
		g += clamp(1.0 - abs(d), 0.0, 1.0) > 0.995-(0.00075*i) ? 1.0 : 0.0;
		if(d > 0.0) {
			r = frac(r * 4829.013);
			p.x = (p.x - cp) / (1.0 - cp);
			v += 1.0;
		}
		else {
			r = frac(r * 1239.528);
			p.x = p.x / cp;
		}
		p = p.yx;
	}
	v /= float(iter);
	return float2(g, v);
}

// Fragment shader
float4 frag( v2f i ) : COLOR
{
	//if(dot(i.eyeDir, i.normal)<0.0) { discard; }

	float4_t diffSamplerColor = tex2D( _MainTex, i.uv );

	// Falloff. Convert the angle between the normal and the camera direction into a lookup for the gradient
	float_t normalDotEye = dot( i.normal, i.eyeDir );
	float_t falloffU = clamp( 1 - abs( normalDotEye ), 0.02, 0.98 );
	float4_t falloffSamplerColor = FALLOFF_POWER * tex2D( _FalloffSampler, float2( falloffU, 0.25f ) );
	float3_t combinedColor = lerp( diffSamplerColor.rgb, falloffSamplerColor.rgb * diffSamplerColor.rgb, falloffSamplerColor.a );

	// Rimlight
#ifdef ENABLE_RIMLIGHT
	float_t rimlightDot = saturate( 0.5 * ( dot( i.normal, i.lightDir ) + 1.0 ) );
	falloffU = saturate( rimlightDot * falloffU );
	//falloffU = saturate( ( rimlightDot * falloffU - 0.5 ) * 32.0 );
	falloffU = tex2D( _RimLightSampler, float2( falloffU, 0.25f ) ).r;
	float3_t lightColor = diffSamplerColor.rgb * 0.5; // * 2.0;
	combinedColor += falloffU * lightColor;
#endif

#ifdef ENABLE_CAST_SHADOWS
	// Cast shadows
	float3_t shadowColor = _ShadowColor.rgb * combinedColor;
	float_t attenuation = saturate( 2.0 * LIGHT_ATTENUATION( i ) - 1.0 );
	combinedColor = lerp( shadowColor, combinedColor, attenuation );
#endif

	float4_t finalColor = float4_t( combinedColor, diffSamplerColor.a ) * _Color;
	finalColor.rgb *= _LightColor0.rgb;


	float2 dg = boxcell(i.wpos, i.normal);
	float fade = i.wpos.y+1.0 - _Time.y+dg.y*0.5;
	if(fade>0.0) { discard; }
	float s = max((0.8-modc(i.wpos.y + _Time.y*1.0 + 1.5, 3.33)), 0.0) * 10.0;
	float pc = 1.0-clamp(1.0 - max(min(dg.x, 2.0)-1.0, 0.0)*2.0, 0.0, 1.0);
	float na = pow(1.0 - abs(dot(i.normal, i.eyeDir.xyz)), 2.0);
	i.spos /= i.spos.w;
	float scanline = max(min(abs(modc(i.spos.y, 0.02)-0.01)*100.0, 1.0), 0.5);
	finalColor.rgb *= float3(0.5, 0.6, 1.8) * 1.5 * (modc(_Time.y, 0.0073)*100.0+1.0) * (pc*s*na+1.0);
	finalColor.rgb *= scanline;
	if(fade>-0.15) { finalColor.rgb *= 5.0; }

	return finalColor;
}
